06-1. 몽고디비 시작하기
- 몽고디비: 비관계형 데이터베이스, NoSQL(Not Only SQL), 성능 측면에 강점(실시간/대용량 트래픽 처리)
    - 컬렉션(Collection): 여러 데이터가 모인 하나의 단위, 테이블과 달리, 데이터를 정해 놓은 칼럼의 형태대로 컬렉션에 넣어야 한다는 제약 없음
    - 데이터베이스는 컬렉션의 집합, 컬렉션은 여러 개의 문서 객체(Document)를 가질 수 있음(데이터베이스 > 컬렉션 > 문서 객체)
    - Linux(Ubuntu) 설치: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
    - 셸(Shell, 명령을 받아서 실행하는 프로그램): % mongo
    - 데이터 베이스 지정: % use local
    - 데이터베이스는 db라는 이름으로 접근할 수 있고, 데이터베이스 안에는 컬렉션을 만들고 그 안에 문서를 저장할 수 있음
    - 문서 추가: % db.users.insert({name: '소녀시대', age: 20})  --> db: 데이터베이스, users: 컬렉션, {name: '소녀시대', age: 20}: 문서
    - 문서 조회: % db.users.find().pretty() --> pretty(): 조회된 결과를 예쁘게 출력
    - 문서 삭제: % db.users.remove({name:/소녀/}) --> regexp 표현식 사용 가능

06-2. 익스프레스에서 몽고디비 사용하기
* package.json: npm init 실행하여 생성, dependencies 정보(모듈 이름, 버전), node_modules 아래 저장
- express 모듈: 익스프레스 기본 모듈(% npm install express --save)
- http 모듈: 웹 서버 모듈(% npm install http --save)
- path 모듈: 패스 문자열(% npm install path --save)
- body-parser 모듈: POST 요청 처리(% npm install body-parser --save)
- cookie-parser 모듈: 쿠키(% npm install cookie-parser --save)
- serve-static 모듈: 세션(% npm install serve-static --save)
- express-session 모듈: 세션 관리(% npm install express-session --save)
- express-error-handler 모듈: 오류 처리(% npm install express-error-handler --save)
- mongodb 모듈: mongodb 연결(% npm install mongodb --save)
    - 연결: connect() 메소드 호출, 연결 정보 문자열(mongodb://%IP정보%:%포트 정보%/%데이터베이스이름%)
        var MongoClient = require('mongodb').MongoClient;
        MongoClient.connect('mongodb://localhost:27017/local', function(err, db) { ... database = db; });
        
    - 조회: find() 메소드 호출
        var users = database.collection('users');
        users.find({"id": id, "password": password}).toArray(function(err, docs){...}); --> id와 password 속성의 값을 파라미터로 전달하여 조회한 후 조회 결과는 배열 객체로 반환
        
    - 추가: insertMany() 메소드 호출
        var users = database.collection('users');
        users.insertMany([{"id": id, "password": password, "name": name}], function(err, result) {...});
        
06-3. 몽구스로 데이터베이스 다루기
- 몽구스(mongoose): 오브젝트 맵퍼(Object Mapper, 자바스크립트 객체와 데이터베이스 객체를 서로 매칭하여 바꿀 수 있게 하는 것), 스키마를 만들고 이 스키마에 맞는 모델(Model)을 만들어서 데이터를 손쉽게 저장/조회
- 설치: % npm install mongoose --save
- 주요 메소드
    - connect(uri(s), [options], [callback]): 데이터베이스 연결
    - Schema(): 스키마 정의
    - model(name, [schema], [collection], [skiplnit]): 모델 정의
- 예제
    var mongoose = require('mongoose');
    
    mongoose.Promise = global.Promise;
    mongoose.connect('mongodb://localhost:27017/local');
    database = mongoose.connection;
    
    database.on('error', console.error.bind(console, 'mogoose connection error.'));
    database.on('open', function() {
        UserSchema = mongoose.Schema({
            id: String,
            name: String,
            password: String
        });
        
        UserModel = mongoose.model("users", UserSchema);
    });
    database.on('disconnected', function() {
        setInterval(connectDB, 5000);
    });
- open 이벤트: 데이터베이스 연결되었을 때 발생
- error 이벤트: 데이터베이스 연결이 제대로 되지 않을 때 발생
- disconnected 이벤트: 데이터베이스 연결이 끊어졌을 때 호출
- mongoose.Schema() 메소드 호출하면 새로운 스키마 생성
    - 타입: String(문자열), Number(숫자), Boolean(이진), Array(배열), Buffer(버퍼), Date(날짜), ObjectId(문서 오브젝트 아이디), Mixed(혼합)
    - 속성: type(자료형), required(필수 여부), unique(고유값 여부)
    - 예제
        var UserSchema = new mongoose.Schema({
            id: {type: String, required: true, unique: true},
            password: {type: String, required: true},
            name: String,
            age: Number,
            created_at: Date,
            updated_at: Date
        });
- model() 메소드: 첫 번째 파라미터로는 모델 이름이 전달되고 두 번째 파라미터에는 스키마 객체가 전달
- 대표 메소드
    - find([criteria], [callback]): 조회
    - save([options], [callback]): 저장
    - update([criteria], [doc], [options], [callback]): 업데이트
    - remove([criteria], [callback]): 삭제
    - 예제
        // update
        UserModel.where({id: 'test01'}).update({name: '애프터스쿨'}, function(err...) {...})
        // save
        var user = new UserModel({"id": id, "password": password, "name": anme});
        user.save(function(err) {...});

06-4. 인덱스와 메소드 사용하기
- 빠른 검색을 위해 인덱스를 만들수 있음
    var UserSchema = new mongoose.Schema({
        ...
        name: {type: String, index: 'hashed'},
        created_at: {type: Date, index: {unique: false, expired: '1d'}},
        ...
    });
- 위치 기반 서비스를 위해 저장되는 경위도 좌표에는 공간 인덱싱 사용
    {type: [Number], index: '2d', sparse: true}
- 스키마 객체에 메소드 추가 가능
    - static(name, fn): 모델 객체에서 사용할 수 있는 함수를 등록
    - method(name, fn): 모델 인스턴스 객체에서 사용할 수 있는 함수 등록

06-5. 비밀번호 암호화하여 저장하기
- mongoose에서 제공하는 virtual()함수를 사용하면 쉽게 처리 가능
- virtual()함수는 문서 객체에 실제로 저장되는 속성이 아니라 가상의 속성을 지정할 수 있음
- virtual()함스로 속성을 지정하면 set()메소드와 get()메소드를 호출할 수 있다. set() 메소드에서는 전달된 파라미터를 띄어쓰기 기호로 구분하기 위해 split() 메소드 사용
    UserSchema.virtual('info').set(function(info) {
        var splitted = info.split(' ');
        this.id = splitted[0];
        this.name = splitted[1];
    }).get(function() {...});
- crypto 모듈: 암호화(% npm install crypto --save)
    UserSchema.virtual('password').set(function(password) {
        this._password = password;
        this.salt = this.makeSalt();
        this.hashed_password = this.encryptPassword(password);
    }).get(function() {
        return this._password;
    });
    
    UserSchema.method('encryptPassword', function(plainText, inSalt) {
        if (inSalt) {
            return crypto.createHmac('sha1', inSalt).update(plainText).digest('hex');
        } else {
            return crypto.createHmac('sha1', this.salt).update(plainText).digest('hex');
        }
    });
    
06-6. MySQL 데이터베이스 사용하기
- mysql 모듈: % npm install mysql --save
- 관계형 데이터베이스에 연결할 때는 보통 커넥션 풀 사용(createPool 메소드)
    var mysql = require('mysql');
    var pool = mysql.createPool({
        connectionLimit: 10,
        host: 'localhost',
        user: 'root',
        password: '0000',
        database: 'test',
        debug: false
    });
- 커넥션 풀 객체 속성
    - connectionLimit: 최대 연결 개수
    - host: 호스트 이름
    - port: 포트
    - user: 사용자 아이디
    - password: 비밀번호
    - database: 데이터베이스 이름
    - debug: 로깅 여부
- SQL문 실행
    var exec = conn.query('insert into users set ?', data, function(err, result) {
        conn.release();
        ...
        callback(null, result);
    });

"끝"