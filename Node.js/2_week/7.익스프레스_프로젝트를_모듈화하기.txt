- 모듈 파일로 분리하는 방법
- 설정 파일을 만들어 사용하는 방법

07-1.모듈화 방법 자세히 살펴보기
- exports 전역 변수는 어디에서나 접근할 수 있게 정의된 것이고 속성도 추가할 수 있습니다.
  - user1.js
    // exports 객체 속성으로 함수 추가
    exports.getUser = function() {
      return {id: 'test01', name: '소녀시대'};
    }

    // exports 객체 속성으로 객체 추가
    exports.group = {id: 'group01', name: '친구'};
  - module_test1.js
    // require() 메소드는 exports 객체를 반환함
    var user1 = require('./user1');

    function showUser() {
      return user1.getUser().name + ', ' + user1.group.name;
    }
  - 첫 번째 속성은 getUser 속성이며 속성의 값으로 함수가 할당
  - 두 번째 속성은 group 속성이며 id와 name 속성을 가진 객체가 할당
- exports에 객체를 할당하면 전역 변수 exports와 무관한 모듈 파일 안의 변수가 되고 이 모듈을 불러들인 쪽에서는 비어 있는 exports 전역 변수만 참조
  - user2.js
    // Reason: exports는 속성으로, exports에 속성을 추가하면 모듈에서 접근하지만
    //         exports에 객체를 지정하면 자바스크립트에서 새로운 변수로 처리함
    exports = {
      getUser: function() {
        return {id: 'test01', name: '소녀시대'};
      },
      group: {id: 'group01', name: '친구'}
    }
  - module_test2.js
    var user = require('./user2');

    function showUser() {
      return user.getUser().name + ', ' + user.group.name;
    }
  - 코드를 입력하면 getUser()함수와 group객체를 속성으로 가진 객체를 만들어 exports에 할당
  - exports 속성으로 getUser()함수와 group 객체를 추가한 것과 같은 효과를 냄
- module.exports를 사용해서 객체를 그대로 할당하기
  - user3.js
    var user = {
      getUser: function() {
        return {id: 'test01', name: '소녀시대'};
      },
      group: {id: 'group01', name: '친구'}
    }

    module.exports = user;
  - module_test3.js
    var user = require('./user3');

    function showUser() {
      return user.getUser().name + ', ' + user.group.name;
    }
  - module.exports를 사용하는 것을 권장, 모듈 불러오는 쪽에서는 module.exports에 할당된 객체나 속성을 참조할 수 있으며 exports 전역 변수는 무시됨
- require()메소드는 다른 모듈 파일에서 만든 객체를 참조
- 모듈을 분리할 때 사용하는 전형적인 코드 패턴
  - 함수를 할당하는 경우: 모듈 안에서 함수를 만들어 할당, 소괄호를 붙여 모듈을 실행
    - user7.js
      exports.printUser = function() {
        ...
      };
    - module_test7.js
      var printUser = require('./user7').printUser;
      printUser();  // 소괄호 붙여 모듈 실행
  - 인스턴스 객체를 할당하는 경우: 모듈 안에서 인스턴스 객체를 만들어 할당, 객체의 메소드를 호출하거나 속성을 사용
    - user8.js
      function User(id, name) {
        this.id = id;
        this.name = name;
      }

      User.prototype.getUser = funciton() {
        return {id: this.id, name: this.name};
      }

      User.prototype.group = {id: 'group1', name: '친구'};

      User.prototype.printUser = function() {
        ...
      }

      module.exports = new User('test01', '소녀시대');
    - module_test8.js
      var user = require('./user8');
      user.printUser();
    - require()메소드를 사용하여 user8.js 파일에 정의된 모듈을 불러오면 new User()로 만든 인스턴스 객체가 반환
    - User의 인스턴스 객체에는 printUser()메소드가 추가되어 있으므로 user.printUser()와 같은 형태로 메소드를 호출
  - 프로토타입 객체를 할당하는 경우: 모듈 안에서 프로토타입 객체를 만들어 할당, new 연산자로 인스턴스 객체를 만들어 사용
    - user10.js
      ...
      module.exports = User;
    - module_test10.js
      var User = require('./user10');
      var user = new User('test01', '소녀시대');
      user.printUser();
    - User 객체를 새로 정의한 후 module.exports에 직접 할당
    - User 객체를 정의하는 부분만 별도의 모듈 파일로 분리할 수 있으니 다른 파일에서 필요할 때마다 직접 인스턴스 객체를 만들어 사용할 수 있음

07-2.사용자 정보 관련 기능을 모듈화하기
- 라우팅 미들웨어에서 사용하는 모듈들은 대부분 데이터베이스 기능을 사용
- 데이터베이스 기능도 각 기능을 독립적으로 분리하는 것이 좋음
- 스키마 파일을 별도의 모듈 파일로 분리하기
  - 스키마를 만들려면 mongoose 모듈 객체 참조 필요
  - user_schema.js
    var crypto = require('crypto');
    var Schema = {};
    Schema.createSchema = function(mongoose) {
      var UserSchema = mongoose.Schema({
        ...
      });
      return UserSchema;
    };

    module.exports = Schema;
  - app.js
    funciton createUserSchema() {
      UserSchema = require('./database/user_schema').createSchema(mongoose);
      UserModel = mongoose.model("user3", UserSchema);
      ...
    };
- 사용자 처리 함수를 별도의 모듈 파일로 분리
  - app.post() 함수의 두 번째 파라미터로 전달되는 것이 함수이므로 이 함수를 별도의 모듈로 분리
    - user.js
      var login = funciton(req, res) {
        ...
      }
      var init = funciton(db, schema, model) {
        ...
      }
      module.exports.init = init;
      module.exports.login = login;
    - app.js
      funciton createUserSchema() {
        ...
        user.init(database, UserSchema, UserModel);
      }
    - init()함수를 호출하면서 파라미터로 전달된 객체들은 모두 변수에 할당, login, adduser, listuser 함수 참조
    - createUserSchema()함수 안에 user 모듈의 init() 메소드를 호출하는 코드 추가

07-3.설정 파일 만들기
- config.js 파일 안에 들어 있는 설정 정보에는 서버를 실행하는 데 필요한 정보와 데이터베이스 정보 등을 담아 둠
  - 데이터베이스 스키마 정보: db_schemas 배열 객체
  - 라우팅 정보: route_info 배열 객체
  - config.js
    module.exports = {
      db_schemas: [
        {file: './user_schema', collection: 'user3', shcemaName: 'UserSchema',
        modleName: 'UserModel'}
      ],
      // file: 스키마 파일 지정
      // collection: 컬렉션 이름 지정
      // schemaName: 스키마 파일을 불러들인 후 반환된 객체를 어떤 속성 이름으로 할 것인지 지정
      // modelName: 스키마에서 모델 객체를 만든 후 어떤 속성 이름으로 할 것인지 지정
      route_info: [
        {file: './user', path: '/process/login', method: 'login', type: 'post'},
        ...
      ]
      // file: 라우팅 파일 지정
      // path: 클라이언트 요청 패스 지정
      // method: 객체 함수 이름 지정
      // type: get/post
    };

07-4.UI 라이브러리로 웹 문서 예쁘게 만들기
- Semantic UI: % npm install semantic-ui --save
  - node_modules/semantic-ui
    - semantic.min.css, semantic.min.js 파일을 /public 폴더로 복사
    - login.html
      <!DOCTYPE html>
      <html>
        ...
        <link href="./semantic.min.css" rel="stylesheet">
        <script src="./semantic.min.js"></script>
        <body>
          <div id="cardbox" class="ui blue fluid card">
      ...
- 반응형 웹으로 웹 문서를 구별해서 보여 주기
  - 미디어 쿼리(Media Query)를 사용해서 단말의 가로 크기나 출력 단말의 종료 등을 구별한 후 CSS 조정
- UI 라이브러리 종류: 부트스트랩(Bootstrap), 타이톤(Titon)
"끝"
