“Thread Scheduling for Cache Locality”
7강 심화자료, J. Philbin, J. Edler, 0. J. Anshus, C. C. Douglas, and K. Li, Archit:ectura/ Support for Programrning Languages and Operating Systems (1996), pages 60-71.


1. 논문의 동기 (논문의 목적 및 해결하고자 하는 문제)
프로세서와 메모리 간의 성능 격차를 보완하기 위해 2 레벨의 캐시 메모리를 제공하고 캐시 크기보다 큰 데이터 세트를 가진 응용 프로그램의 경우
메모리 참조 지역성이 높지 않을 수 있는데 이 때 발생하는 캐시 미스는 성능에 큰 영향을 미칠 수 있습니다.
본 고에서는 프로세서와 메모리 간의 성능 격차를 개선하기 위하여 응용 프로그램 데이터 지역성 개선 기법을 연구하는데 목적을 두고 있다.


2. 기존 연구와의 차별성, 문제를 접근하는 관점
기존에 잘 알려진 소프트웨어 기법인 타일링(Tiling, blocking이라고도 함)은 캐시 미스를 줄이고, 가상 메모리, 캐시 및 레지스터를 포함한 모든 레벨의 메모리 계층에 적용할 수 있으며
일반적으로 적용할 수 있는 기술보다 성능이 좋으나 몇 가지 제한이 존재한다. 본 고에서는 스레드를 이용하여 데이터 지역성을 개선하면서 타일링의 성능 이점을 대부분 달성하는 기술을 제시한다.
문제를 접근하는 관점은 스레드를 이용하여 데이터 지역성 스케줄링 문제점을 개선하고 pseudocode와 예시, 성능 검증을 통한 검증으로 풀어가고 있다.


3. 논문이 제안하는 문제를 해결하기 위한 기법
스레드 기법을 이용하여 데이터 지역성 향상을 향상시키고 있는데, 지역성 스케줄링 영역에서는 스레드 기법과 스케줄링 문제점, 이것을 해결하기 위한 알고리즘 부분으로 나누어 설명하고 있다.
그리고 스레드 패키지를 구현하고 검증하는 방식으로 문제를 해결한다.
첫번째 지역성 스케줄링에서 순차 스케줄링 프로그램에 스레딩 기법을 적용하면 프로그램의 오버헤드, 시간 및 공간 요구 부분에서 이점을 얻을 수 있다.
하지만 스레딩이 적용된 스케줄링에는 몇 가지 문제점이 존재하는데 스레딩과 관련된 총 비용이 캐시 미스 제거 비용보다 낮아야 하고, 스케줄링 알고리즘이 고수준이어야 합니다.
이러한 문제를 해결하기 위하여 본 고에서는 모든 스레드가 독립적으로 동작해야 하고 스레드 별 메모리 참조 정보를 스케줄러가 인지하여 캐시 미스를 최소화하는 순서를 찾는 최적의 알고리즘을 제시하고 있다.
알고리즘에 주요 아이디어는 스레드가 실행될 때 스레드를 예약하여 캐시 미스를 방지하고 2차원 플랜을 이용하여 스레드 데이터 위치를 결정하는 것이다.
스레드 할당 시 2개의 힌트 주소를 받아 위치 정보로 이용하고, 위치 정보를 해싱하여 배치하는 알고리즘을 설명한다.
이 알고리즘을 기반으로 간단한 스레드 패키지를 구현하고 성능 검증을 통해 개선된 부분에 대한 검증 및 결론을 제시하고 있다.


4. 개인이 생각하는 논문의 제한점 및 개선방향 (논문에 대한 비판적인 의견)
본 고 마지막 부분에 제한점에 대한 내용이 기술되고 있지만, 제가 생각하하는 제한점과 개선방향은 아래와 같습니다.
해당 논문이 작성된 년도가 1996년도 임을 생각하면 '무어의 법칙'이 통하는 시기였습니다. 하지만 2000년도에 들어서면서 프로세서의 발전은 어느 정도 한계에 왔다고 개인적으로 생각합니다.
프로세서 자체의 성능 개선보다는 멀티 프로세서를 통한 성능 개선이 주를 이루고 있고, 반면 메모리는 '황의 법칙'이 나올 정도로 집적도와 성능이 날로 좋아지고 있다고 판단됩니다.
본 고에서의 개선 방향은 멀티 프로세서 환경에서의 데이터 지역성 아니면 클라우드 환경에서의 데이터 지역성을 개선하는 방향으로 연구하면 좋을 것 같습니다.


"끝"